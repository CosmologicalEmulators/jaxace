name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Check lock file
      run: poetry check --lock
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests
      run: |
        poetry run pytest tests/ -v --tb=short --cov=jaxace --cov-report=term-missing --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Check lock file
      run: poetry check --lock
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: Run linting
      run: |
        poetry run python -m pip install ruff
        poetry run ruff check jaxace/ tests/
      continue-on-error: true
    
    - name: Check code formatting
      run: |
        poetry run python -m pip install black isort
        poetry run black --check jaxace/ tests/
        poetry run isort --check-only jaxace/ tests/
      continue-on-error: true

  test-minimal:
    name: Minimal test suite (fast)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run core tests only
      run: |
        poetry run pytest tests/test_core_functionality.py tests/test_simple.py -v --tb=short
    
    - name: Test imports
      run: |
        poetry run python -c "import jaxace; print('✓ jaxace import successful')"
        poetry run python -c "from jaxace.background import E_z, r_z, D_z, f_z; print('✓ background functions import successful')"
        poetry run python -c "from jaxace.core import FlaxEmulator; print('✓ core import successful')"